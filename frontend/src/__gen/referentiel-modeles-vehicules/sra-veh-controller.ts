/*
 * Generated by orval v5.3.2 üç∫
 * Do not edit manually.
 * API modeles-vehicules
 * Cette API permet de g√©rer le r√©f√©rentiel des v√©hicules (mod√®le g√©n√©rique).<br> Un v√©hicule peut √™tre de type auto, moto, quad, cyclo ou camping-car.<br> L'API permet d'exposer (recherche, consultation) des donn√©es sp√©cifiques √† chaque type de v√©hicules (par exemple le nombre de portes pour un v√©hicule de type auto) ou communes √† tous les types de v√©hicules (par exemple recherche d'un v√©hicule par immatriculation).

 * OpenAPI spec version: 1.6.5
 */
import axios,{
  AxiosRequestConfig
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  PageSraVehDto,
  GetSraWithCodeEtatUsingGETParams,
  SraVehDto,
  SraVehDtoBody
} from './referentiel-modeles-vehicules.schemas'
import {
  rest
} from 'msw'
import faker from 'faker'


type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const getSraWithCodeEtatUsingGET = <Data = unknown>(
    params?: GetSraWithCodeEtatUsingGETParams, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? PageSraVehDto : Data>(
      `/v1/modeles/SRA`,
      {
        params,
  baseURL: '/api/referentiel/modeles_vehicules', 
    ...options },
    );
  }


export const getGetSraWithCodeEtatUsingGETQueryKey = (params?: GetSraWithCodeEtatUsingGETParams,) => [`/v1/modeles/SRA`, ...(params ? [params]: [])]

    
export const useGetSraWithCodeEtatUsingGET = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 params?: GetSraWithCodeEtatUsingGETParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getSraWithCodeEtatUsingGET>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getGetSraWithCodeEtatUsingGETQueryKey(params);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof getSraWithCodeEtatUsingGET>, Error>(queryKey, () => getSraWithCodeEtatUsingGET<Data>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const createSraVehUsingPOST = <Data = unknown>(
    sraVehDtoBody: SraVehDtoBody, options?: AxiosRequestConfig
 ) => {
    return axios.post<Data extends unknown ? SraVehDto : Data>(
      `/v1/modeles/SRA`,
      sraVehDtoBody,options
    );
  }



    export const useCreateSraVehUsingPOST = <
      Data extends unknown = unknown,
      Error extends unknown = unknown
    >(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createSraVehUsingPOST>, Error, {data: SraVehDtoBody}, unknown>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<AsyncReturnType<typeof createSraVehUsingPOST>, Error, {data: SraVehDtoBody}>((props) => {
        const {data} = props || {};

        return  createSraVehUsingPOST<Data>(data,axiosOptions)
      }, mutationOptions)
    }
    export const updateSraVehUsingPUT = <Data = unknown>(
    id: number,
    sraVehDtoBody: SraVehDtoBody, options?: AxiosRequestConfig
 ) => {
    return axios.put<Data extends unknown ? SraVehDto : Data>(
      `/v1/modeles/SRA/${id}`,
      sraVehDtoBody,options
    );
  }



    export const useUpdateSraVehUsingPUT = <
      Data extends unknown = unknown,
      Error extends unknown = unknown
    >(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof updateSraVehUsingPUT>, Error, {id: number;data: SraVehDtoBody}, unknown>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<AsyncReturnType<typeof updateSraVehUsingPUT>, Error, {id: number;data: SraVehDtoBody}>((props) => {
        const {id,data} = props || {};

        return  updateSraVehUsingPUT<Data>(id,data,axiosOptions)
      }, mutationOptions)
    }
    export const deleteSraVehUsingDELETE = <Data = unknown>(
    id: number, options?: AxiosRequestConfig
 ) => {
    return axios.delete<Data extends unknown ? SraVehDto : Data>(
      `/v1/modeles/SRA/${id}`,options
    );
  }



    export const useDeleteSraVehUsingDELETE = <
      Data extends unknown = unknown,
      Error extends unknown = unknown
    >(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof deleteSraVehUsingDELETE>, Error, {id: number}, unknown>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<AsyncReturnType<typeof deleteSraVehUsingDELETE>, Error, {id: number}>((props) => {
        const {id} = props || {};

        return  deleteSraVehUsingDELETE<Data>(id,axiosOptions)
      }, mutationOptions)
    }
    

export const getGetSraWithCodeEtatUsingGETMock = () => ({content: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({cetaSraVeh: faker.helpers.randomize([faker.random.word(), undefined]), codeSraVeh: faker.helpers.randomize([faker.random.word(), undefined]), dateMaj: faker.helpers.randomize([faker.random.word(), undefined]), idSraVeh: faker.helpers.randomize([faker.datatype.number(), undefined]), numRepVeh: faker.helpers.randomize([faker.random.word(), undefined])})), undefined]), first: faker.helpers.randomize([faker.datatype.boolean(), undefined]), last: faker.helpers.randomize([faker.datatype.boolean(), undefined]), number: faker.helpers.randomize([faker.datatype.number(), undefined]), numberOfElements: faker.helpers.randomize([faker.datatype.number(), undefined]), size: faker.helpers.randomize([faker.datatype.number(), undefined]), sort: faker.helpers.randomize([{}, undefined]), totalElements: faker.helpers.randomize([faker.datatype.number(), undefined]), totalPages: faker.helpers.randomize([faker.datatype.number(), undefined])})

export const getCreateSraVehUsingPOSTMock = () => ({cetaSraVeh: faker.helpers.randomize([faker.random.word(), undefined]), codeSraVeh: faker.helpers.randomize([faker.random.word(), undefined]), dateMaj: faker.helpers.randomize([faker.random.word(), undefined]), idSraVeh: faker.helpers.randomize([faker.datatype.number(), undefined]), numRepVeh: faker.helpers.randomize([faker.random.word(), undefined])})

export const getUpdateSraVehUsingPUTMock = () => ({cetaSraVeh: faker.helpers.randomize([faker.random.word(), undefined]), codeSraVeh: faker.helpers.randomize([faker.random.word(), undefined]), dateMaj: faker.helpers.randomize([faker.random.word(), undefined]), idSraVeh: faker.helpers.randomize([faker.datatype.number(), undefined]), numRepVeh: faker.helpers.randomize([faker.random.word(), undefined])})

export const getDeleteSraVehUsingDELETEMock = () => ({cetaSraVeh: faker.helpers.randomize([faker.random.word(), undefined]), codeSraVeh: faker.helpers.randomize([faker.random.word(), undefined]), dateMaj: faker.helpers.randomize([faker.random.word(), undefined]), idSraVeh: faker.helpers.randomize([faker.datatype.number(), undefined]), numRepVeh: faker.helpers.randomize([faker.random.word(), undefined])})

export const getSraVehControllerMSW = () => [
rest.get('*/v1/modeles/SRA', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetSraWithCodeEtatUsingGETMock()),
        )
      }),rest.post('*/v1/modeles/SRA', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateSraVehUsingPOSTMock()),
        )
      }),rest.put('*/v1/modeles/SRA/:id', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUpdateSraVehUsingPUTMock()),
        )
      }),rest.delete('*/v1/modeles/SRA/:id', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeleteSraVehUsingDELETEMock()),
        )
      }),]
