/*
 * Generated by orval v5.3.2 üç∫
 * Do not edit manually.
 * API modeles-vehicules
 * Cette API permet de g√©rer le r√©f√©rentiel des v√©hicules (mod√®le g√©n√©rique).<br> Un v√©hicule peut √™tre de type auto, moto, quad, cyclo ou camping-car.<br> L'API permet d'exposer (recherche, consultation) des donn√©es sp√©cifiques √† chaque type de v√©hicules (par exemple le nombre de portes pour un v√©hicule de type auto) ou communes √† tous les types de v√©hicules (par exemple recherche d'un v√©hicule par immatriculation).

 * OpenAPI spec version: 1.6.5
 */
import axios,{
  AxiosRequestConfig
} from 'axios'
import {
  useQuery,
  UseQueryOptions
} from 'react-query'
import type {
  VehiculeSynthese,
  RecupererListeMotosQuadParams,
  CarrosserieVehicule,
  RecupererListeCarrosseriesMotosQuadParams,
  FamilleVehicule,
  RecupererListeFamillesMotosQuadParams,
  GroupeTarificationVehicule,
  RecupererListeGroupesTarifMotosQuadParams,
  MarqueVehicule,
  RecupererListeMarquesMotosQuadParams
} from './referentiel-modeles-vehicules.schemas'
import {
  rest
} from 'msw'


type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const recupererListeMotosQuad = <Data = unknown>(
    params?: RecupererListeMotosQuadParams, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? VehiculeSynthese[] : Data>(
      `/vehicules/motos_quads`,
      {
        params,
  baseURL: '/api/referentiel/modeles_vehicules', 
    ...options },
    );
  }


export const getRecupererListeMotosQuadQueryKey = (params?: RecupererListeMotosQuadParams,) => [`/vehicules/motos_quads`, ...(params ? [params]: [])]

    
export const useRecupererListeMotosQuad = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 params?: RecupererListeMotosQuadParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererListeMotosQuad>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererListeMotosQuadQueryKey(params);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererListeMotosQuad>, Error>(queryKey, () => recupererListeMotosQuad<Data>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const recupererListeCarrosseriesMotosQuad = <Data = unknown>(
    params?: RecupererListeCarrosseriesMotosQuadParams, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? CarrosserieVehicule[] : Data>(
      `/vehicules/motos_quads/carrosseries`,
      {
        params,
  baseURL: '/api/referentiel/modeles_vehicules', 
    ...options },
    );
  }


export const getRecupererListeCarrosseriesMotosQuadQueryKey = (params?: RecupererListeCarrosseriesMotosQuadParams,) => [`/vehicules/motos_quads/carrosseries`, ...(params ? [params]: [])]

    
export const useRecupererListeCarrosseriesMotosQuad = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 params?: RecupererListeCarrosseriesMotosQuadParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererListeCarrosseriesMotosQuad>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererListeCarrosseriesMotosQuadQueryKey(params);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererListeCarrosseriesMotosQuad>, Error>(queryKey, () => recupererListeCarrosseriesMotosQuad<Data>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const recupererListeFamillesMotosQuad = <Data = unknown>(
    params?: RecupererListeFamillesMotosQuadParams, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? FamilleVehicule[] : Data>(
      `/vehicules/motos_quads/familles`,
      {
        params,
  baseURL: '/api/referentiel/modeles_vehicules', 
    ...options },
    );
  }


export const getRecupererListeFamillesMotosQuadQueryKey = (params?: RecupererListeFamillesMotosQuadParams,) => [`/vehicules/motos_quads/familles`, ...(params ? [params]: [])]

    
export const useRecupererListeFamillesMotosQuad = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 params?: RecupererListeFamillesMotosQuadParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererListeFamillesMotosQuad>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererListeFamillesMotosQuadQueryKey(params);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererListeFamillesMotosQuad>, Error>(queryKey, () => recupererListeFamillesMotosQuad<Data>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const recupererListeGroupesTarifMotosQuad = <Data = unknown>(
    params?: RecupererListeGroupesTarifMotosQuadParams, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? GroupeTarificationVehicule[] : Data>(
      `/vehicules/motos_quads/groupes_tarification`,
      {
        params,
  baseURL: '/api/referentiel/modeles_vehicules', 
    ...options },
    );
  }


export const getRecupererListeGroupesTarifMotosQuadQueryKey = (params?: RecupererListeGroupesTarifMotosQuadParams,) => [`/vehicules/motos_quads/groupes_tarification`, ...(params ? [params]: [])]

    
export const useRecupererListeGroupesTarifMotosQuad = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 params?: RecupererListeGroupesTarifMotosQuadParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererListeGroupesTarifMotosQuad>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererListeGroupesTarifMotosQuadQueryKey(params);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererListeGroupesTarifMotosQuad>, Error>(queryKey, () => recupererListeGroupesTarifMotosQuad<Data>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const recupererListeMarquesMotosQuad = <Data = unknown>(
    params?: RecupererListeMarquesMotosQuadParams, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? MarqueVehicule[] : Data>(
      `/vehicules/motos_quads/marques`,
      {
        params,
  baseURL: '/api/referentiel/modeles_vehicules', 
    ...options },
    );
  }


export const getRecupererListeMarquesMotosQuadQueryKey = (params?: RecupererListeMarquesMotosQuadParams,) => [`/vehicules/motos_quads/marques`, ...(params ? [params]: [])]

    
export const useRecupererListeMarquesMotosQuad = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 params?: RecupererListeMarquesMotosQuadParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererListeMarquesMotosQuad>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererListeMarquesMotosQuadQueryKey(params);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererListeMarquesMotosQuad>, Error>(queryKey, () => recupererListeMarquesMotosQuad<Data>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}



export const getMotosQuadsMSW = () => [
rest.get('*/vehicules/motos_quads', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/vehicules/motos_quads/carrosseries', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/vehicules/motos_quads/familles', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/vehicules/motos_quads/groupes_tarification', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/vehicules/motos_quads/marques', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
