/*
 * Generated by orval v5.3.2 üç∫
 * Do not edit manually.
 * iard-devis-vehicules-v1
 * "Cette API permet de g√É¬©rer le contexte iard-devis-vehicules."
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 */
import axios,{
  AxiosRequestConfig
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  DateAntecedentsSinistralite,
  RecupererDatesAntecedentsSinistraliteParams,
  AcceptationRisqueVehicule,
  InfoAcceptationProspect,
  InfoAcceptationSocietaire,
  InfoAcceptationVehicule
} from './iard-devis-vehicules-v1.schemas'
import {
  rest
} from 'msw'
import faker from 'faker'


type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const recupererDatesAntecedentsSinistralite = <Data = unknown>(
    params?: RecupererDatesAntecedentsSinistraliteParams, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? DateAntecedentsSinistralite : Data>(
      `/antecedents_sinistralite/dates`,
      {
        params,
  baseURL: '/api/iard/devis_vehicules/v1/', 
    ...options },
    );
  }


export const getRecupererDatesAntecedentsSinistraliteQueryKey = (params?: RecupererDatesAntecedentsSinistraliteParams,) => [`/antecedents_sinistralite/dates`, ...(params ? [params]: [])]

    
export const useRecupererDatesAntecedentsSinistralite = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 params?: RecupererDatesAntecedentsSinistraliteParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererDatesAntecedentsSinistralite>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererDatesAntecedentsSinistraliteQueryKey(params);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererDatesAntecedentsSinistralite>, Error>(queryKey, () => recupererDatesAntecedentsSinistralite<Data>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const jouerAcceptationProspect = <Data = unknown>(
    infoAcceptationProspect: InfoAcceptationProspect, options?: AxiosRequestConfig
 ) => {
    return axios.post<Data extends unknown ? AcceptationRisqueVehicule : Data>(
      `/jouer_acceptation/prospect`,
      infoAcceptationProspect,options
    );
  }



    export const useJouerAcceptationProspect = <
      Data extends unknown = unknown,
      Error extends unknown = unknown
    >(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof jouerAcceptationProspect>, Error, {data: InfoAcceptationProspect}, unknown>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<AsyncReturnType<typeof jouerAcceptationProspect>, Error, {data: InfoAcceptationProspect}>((props) => {
        const {data} = props || {};

        return  jouerAcceptationProspect<Data>(data,axiosOptions)
      }, mutationOptions)
    }
    export const jouerAcceptationSocietaire = <Data = unknown>(
    referenceSocietaire: string,
    infoAcceptationSocietaire: InfoAcceptationSocietaire, options?: AxiosRequestConfig
 ) => {
    return axios.post<Data extends unknown ? AcceptationRisqueVehicule : Data>(
      `/jouer_acceptation/societaire/${referenceSocietaire}`,
      infoAcceptationSocietaire,options
    );
  }



    export const useJouerAcceptationSocietaire = <
      Data extends unknown = unknown,
      Error extends unknown = unknown
    >(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof jouerAcceptationSocietaire>, Error, {referenceSocietaire: string;data: InfoAcceptationSocietaire}, unknown>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<AsyncReturnType<typeof jouerAcceptationSocietaire>, Error, {referenceSocietaire: string;data: InfoAcceptationSocietaire}>((props) => {
        const {referenceSocietaire,data} = props || {};

        return  jouerAcceptationSocietaire<Data>(referenceSocietaire,data,axiosOptions)
      }, mutationOptions)
    }
    export const jouerAcceptationVehicule = <Data = unknown>(
    infoAcceptationVehicule: InfoAcceptationVehicule, options?: AxiosRequestConfig
 ) => {
    return axios.post<Data extends unknown ? AcceptationRisqueVehicule : Data>(
      `/jouer_acceptation/vehicule`,
      infoAcceptationVehicule,options
    );
  }



    export const useJouerAcceptationVehicule = <
      Data extends unknown = unknown,
      Error extends unknown = unknown
    >(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof jouerAcceptationVehicule>, Error, {data: InfoAcceptationVehicule}, unknown>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<AsyncReturnType<typeof jouerAcceptationVehicule>, Error, {data: InfoAcceptationVehicule}>((props) => {
        const {data} = props || {};

        return  jouerAcceptationVehicule<Data>(data,axiosOptions)
      }, mutationOptions)
    }
    

export const getRecupererDatesAntecedentsSinistraliteMock = () => ({dateDebutCollecteSinistre: faker.random.word(), dateAnterioriteBonus050: faker.random.word()})

export const getJouerAcceptationProspectMock = () => ({codeAcceptation: faker.random.word(), libelleAcceptation: faker.random.word(), justifications: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({codeJustificationRisque: faker.helpers.randomize([faker.random.word(), undefined]), libelleJustificationRisque: faker.helpers.randomize([faker.random.word(), undefined])})), undefined])})

export const getJouerAcceptationSocietaireMock = () => ({codeAcceptation: faker.random.word(), libelleAcceptation: faker.random.word(), justifications: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({codeJustificationRisque: faker.helpers.randomize([faker.random.word(), undefined]), libelleJustificationRisque: faker.helpers.randomize([faker.random.word(), undefined])})), undefined])})

export const getJouerAcceptationVehiculeMock = () => ({codeAcceptation: faker.random.word(), libelleAcceptation: faker.random.word(), justifications: faker.helpers.randomize([[...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({codeJustificationRisque: faker.helpers.randomize([faker.random.word(), undefined]), libelleJustificationRisque: faker.helpers.randomize([faker.random.word(), undefined])})), undefined])})

export const getAcceptationRisqueV√©hiculeMSW = () => [
rest.get('*/antecedents_sinistralite/dates', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRecupererDatesAntecedentsSinistraliteMock()),
        )
      }),rest.post('*/jouer_acceptation/prospect', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getJouerAcceptationProspectMock()),
        )
      }),rest.post('*/jouer_acceptation/societaire/:referenceSocietaire', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getJouerAcceptationSocietaireMock()),
        )
      }),rest.post('*/jouer_acceptation/vehicule', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getJouerAcceptationVehiculeMock()),
        )
      }),]
