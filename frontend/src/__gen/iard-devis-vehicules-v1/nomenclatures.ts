/*
 * Generated by orval v5.3.2 üç∫
 * Do not edit manually.
 * iard-devis-vehicules-v1
 * "Cette API permet de g√É¬©rer le contexte iard-devis-vehicules."
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 */
import axios,{
  AxiosRequestConfig
} from 'axios'
import {
  useQuery,
  UseQueryOptions
} from 'react-query'
import type {
  Nomenclature
} from './iard-devis-vehicules-v1.schemas'
import {
  rest
} from 'msw'
import faker from 'faker'


type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const recupererValeursExperienceConducteur = <Data = unknown>(
     options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? Nomenclature : Data>(
      `/experiences_conducteur`,options
    );
  }


export const getRecupererValeursExperienceConducteurQueryKey = () => [`/experiences_conducteur`]

    
export const useRecupererValeursExperienceConducteur = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererValeursExperienceConducteur>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererValeursExperienceConducteurQueryKey();
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererValeursExperienceConducteur>, Error>(queryKey, () => recupererValeursExperienceConducteur<Data>(axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const recupererValeursOrigineSocietaire = <Data = unknown>(
     options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? Nomenclature : Data>(
      `/passe_autre_assurance`,options
    );
  }


export const getRecupererValeursOrigineSocietaireQueryKey = () => [`/passe_autre_assurance`]

    
export const useRecupererValeursOrigineSocietaire = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererValeursOrigineSocietaire>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererValeursOrigineSocietaireQueryKey();
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererValeursOrigineSocietaire>, Error>(queryKey, () => recupererValeursOrigineSocietaire<Data>(axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const recupererValeursResponsabiliteSinistre = <Data = unknown>(
     options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? Nomenclature : Data>(
      `/responsabilites_sinistre`,options
    );
  }


export const getRecupererValeursResponsabiliteSinistreQueryKey = () => [`/responsabilites_sinistre`]

    
export const useRecupererValeursResponsabiliteSinistre = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererValeursResponsabiliteSinistre>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererValeursResponsabiliteSinistreQueryKey();
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererValeursResponsabiliteSinistre>, Error>(queryKey, () => recupererValeursResponsabiliteSinistre<Data>(axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const recupererValeursTypeConducteur = <Data = unknown>(
     options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? Nomenclature : Data>(
      `/types_conducteur`,options
    );
  }


export const getRecupererValeursTypeConducteurQueryKey = () => [`/types_conducteur`]

    
export const useRecupererValeursTypeConducteur = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererValeursTypeConducteur>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererValeursTypeConducteurQueryKey();
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererValeursTypeConducteur>, Error>(queryKey, () => recupererValeursTypeConducteur<Data>(axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const recupererValeursTypePermis = <Data = unknown>(
    numeroRepertoire: string, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? Nomenclature : Data>(
      `/types_permis/vehicule/${numeroRepertoire}`,options
    );
  }


export const getRecupererValeursTypePermisQueryKey = (numeroRepertoire: string,) => [`/types_permis/vehicule/${numeroRepertoire}`]

    
export const useRecupererValeursTypePermis = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 numeroRepertoire: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererValeursTypePermis>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererValeursTypePermisQueryKey(numeroRepertoire);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererValeursTypePermis>, Error>(queryKey, () => recupererValeursTypePermis<Data>(numeroRepertoire, axiosOptions), {enabled: !!(numeroRepertoire), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const recupererValeursUsage = <Data = unknown>(
    numeroRepertoire: string, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? Nomenclature : Data>(
      `/usages/vehicule/${numeroRepertoire}`,options
    );
  }


export const getRecupererValeursUsageQueryKey = (numeroRepertoire: string,) => [`/usages/vehicule/${numeroRepertoire}`]

    
export const useRecupererValeursUsage = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
 numeroRepertoire: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof recupererValeursUsage>, Error>, axios?: AxiosRequestConfig}

  ) => {
  const queryKey = getRecupererValeursUsageQueryKey(numeroRepertoire);
  const {query: queryOptions, axios: axiosOptions} = options || {}

  const query = useQuery<AsyncReturnType<typeof recupererValeursUsage>, Error>(queryKey, () => recupererValeursUsage<Data>(numeroRepertoire, axiosOptions), {enabled: !!(numeroRepertoire), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}



export const getRecupererValeursExperienceConducteurMock = () => ({nomNomenclature: faker.random.word(), detailNomenclature: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({code: faker.random.word(), libelle: faker.random.word()}))})

export const getRecupererValeursOrigineSocietaireMock = () => ({nomNomenclature: faker.random.word(), detailNomenclature: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({code: faker.random.word(), libelle: faker.random.word()}))})

export const getRecupererValeursResponsabiliteSinistreMock = () => ({nomNomenclature: faker.random.word(), detailNomenclature: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({code: faker.random.word(), libelle: faker.random.word()}))})

export const getRecupererValeursTypeConducteurMock = () => ({nomNomenclature: faker.random.word(), detailNomenclature: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({code: faker.random.word(), libelle: faker.random.word()}))})

export const getRecupererValeursTypePermisMock = () => ({nomNomenclature: faker.random.word(), detailNomenclature: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({code: faker.random.word(), libelle: faker.random.word()}))})

export const getRecupererValeursUsageMock = () => ({nomNomenclature: faker.random.word(), detailNomenclature: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({code: faker.random.word(), libelle: faker.random.word()}))})

export const getNomenclaturesMSW = () => [
rest.get('*/experiences_conducteur', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRecupererValeursExperienceConducteurMock()),
        )
      }),rest.get('*/passe_autre_assurance', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRecupererValeursOrigineSocietaireMock()),
        )
      }),rest.get('*/responsabilites_sinistre', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRecupererValeursResponsabiliteSinistreMock()),
        )
      }),rest.get('*/types_conducteur', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRecupererValeursTypeConducteurMock()),
        )
      }),rest.get('*/types_permis/vehicule/:numeroRepertoire', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRecupererValeursTypePermisMock()),
        )
      }),rest.get('*/usages/vehicule/:numeroRepertoire', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRecupererValeursUsageMock()),
        )
      }),]
